searchState.loadedDescShard("wasm", 0, "The default module name if a RuntimeInstance was created …\nContains the error value\nThe magic number at the very start of the given WASM file …\n…\nContains the success value\n…\n…\nInformation collected from validating a module. This can …\nA value at runtime. This is essentially a duplicate of …\nEach block contains the validated code section and the …\nNaive implementation of spin based locking mechanisms\nThe start function which is automatically executed during …\nThis module contains the definition and implementation of …\nNaive implementation of spin based locking mechanisms\nThis module contains a data structure to allow in-place …\nContains the error value\nThe magic number at the very start of the given WASM file …\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert from and to the little endian byte representation …\nConvert from a byte array to Self\nThis macro implements the <code>LittleEndianBytes</code> trait for a …\nConvert from self to a byte array\nA struct for managing and reading WASM bytecode\nReturns the argument unchanged.\nEntire WASM binary as slice\nA wrapper function for reads with transaction-like …\nCalls <code>U::from(self)</code>.\nConsumes Self, yielding back the internal reference to the …\nCreate a Span starting from <code>pc</code> for the next <code>len</code> bytes\nCall a closure that may mutate the WasmReader\nAdvance the cursor to the first byte of the provided Span …\nInitialize a new WasmReader from a WASM byte slice\nCurrent program counter, i. e. index of the next byte to …\nRead the current byte without advancing the <code>pc</code>\nReads a new <code>Self</code> from given <code>WasmReader</code>.\nNote: If <code>Err</code>, the WasmReader object is no longer …\nNote: If <code>Err</code>, the WasmReader object is no longer …\nLike <code>read</code>, but may panic\nParses a variable-length <code>u32</code> as specified by LEB128. Note: …\nParses a variable-length <code>u64</code> (can be casted to a smaller …\nNote: If <code>Err</code>, the WasmReader object is no longer …\nByte slice to the remainder of the WASM binary, beginning …\nSkip <code>num_bytes</code>, advancing the <code>pc</code> accordingly\nTake <code>N</code> bytes starting from <code>pc</code>, then advance the <code>pc</code> by <code>N</code>\nMethods to read WASM Types from a WasmReader object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn index and offset to describe a (sub-) slice into WASM …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the length of this Span\nCreate a new Span, starting from <code>from</code> and ranging <code>len</code> …\n…\n…\n…\n…\n…\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll opcodes, in alphanumerical order by their numeric …\nTODO: we have to make sure they are NOT null Refs, but …\nMethods to read basic WASM Values from a WasmReader object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHere we can’t implement WasmReadable because we also …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead guard for the <code>RwSpinLock</code>\nA spinlock based, read-write lock which favours writers …\nWrite guard for the <code>RwSpinLock</code>\nThe inner data protected by this lock\nLock state (on ambiguity, the state closer to the top …\nEntry to translate the current branches implicit target …\nΔpc: the amount to adjust the instruction pointer by if …\nΔstp: the amount to adjust the side-table index by if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\npopcnt: the number of values that will be popped if the …\nvalcnt: the number of values that will be copied if the …\nThe default module name if a RuntimeInstance was created …\nHelpers for assertions due to prior validation of a WASM …\nReturns the argument unchanged.\nUsed for getting the offset of an address.\nThis module solely contains the actual interpretation loop …\nCalls <code>U::from(self)</code>.\nInvokes a function with the given parameters, and return …\nGet the indicies of a module and function by their names.\nVerify that the function reference is still valid. A …\nExecute a previosly-validated constant expression. These …\nExecutionInfo is a compilation of relevant information …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf the function is exported from the module or not. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefault implementation of a hookset, with all hooks empty\nTrait that allows user specified hooks for various events …\nReturns the argument unchanged.\nA hook which is called before every wasm instruction\nA hook which is called before every wasm instruction\nCalls <code>U::from(self)</code>.\nInterprets a functions. Parameters and return values are …\nImplementation of the linear memory suitable for …\nSize of a page in the linear memory, measured in bytes\nType to express the page count\nCopy <code>count</code> bytes from one region in the linear memory to …\nImplementation of the behavior described in …\nReturns the argument unchanged.\nGrow the <code>LinearMemory</code> by a number of pages\nCalls <code>U::from(self)</code>.\nGet the length in bytes currently allocated to this …\nFrom a given index, load a datum in the <code>LinearMemory</code>\nCreate a new, empty <code>LinearMemory</code>\nCreate a new, empty <code>LinearMemory</code>\nGet the number of pages currently allocated to this …\nAt a given index, store a datum in the <code>LinearMemory</code>\nA helper for managing values of locals (and parameters) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nfunction_lut[local_module_idx][function_local_idx] = …\nCalls <code>U::from(self)</code>.\nLookup a function by its module and function index.\nManually lookup a function by its module and function name.\nCreate a new linker lookup-table.\n…\nThe store represents all global state that can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCan never be bigger than 65,356 pages\nMust be of the same type as specified in <code>ty</code>\nRepresents the address of an external reference in the …\nRepresents the address of a function within a WebAssembly …\nAn InteropValue is a Rust types that can be converted into …\nAn InteropValueList is an iterable list of InteropValues …\nA value at runtime. This is essentially a duplicate of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStupid From and Into implementations, because Rust’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe WASM spec calls this <code>Activations</code>, however it refers to …\nThe stack at runtime containing\nReturns how many stackframes are on the stack, in total.\nGet a shared reference to the current <code>CallFrame</code>\nGet a mutable reference to the current <code>CallFrame</code>\nStack frames\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex to the function of this <code>CallFrame</code>\nCopy a local variable to the top of the value stack\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal variables such as parameters for this <code>CallFrame</code>’s …\nIndex to the module idx the function originates in.\nReturns a cloned copy of the top value on the stack, or …\nCopy a value of the given ValType from the value stack …\nPop a <code>CallFrame</code> from the call stack, returning the module …\nPop <code>n</code> elements from the value stack’s tail as an …\nPop a reference of unknown type from the value stack\nPop a value of the given ValType from the value stack\nPush a stackframe to the call stack\nPush a value to the value stack\nValue that the PC has to be set to when this function …\nNumber of return values to retain on <code>Stack::values</code> when …\nPop value from the top of the value stack, writing it to …\nCopy value from top of the value stack to the given local\nThe index to the first value on <code>Stack::values</code> that belongs …\nWASM values on the stack, i.e. the actual data that …\nIf the function is exported from the module or not. This …\nDefault implementation of a hookset, with all hooks empty\nTrait that allows user specified hooks for various events …\nRead guard for the <code>RwSpinLock</code>\nA spinlock based, read-write lock which favours writers …\nWrite guard for the <code>RwSpinLock</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inner data protected by this lock\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of self, wrapping the <code>value</code> of type <code>T</code>\nLock state (on ambiguity, the state closer to the top …\nInformation collected from validating a module. This can …\nReturns the argument unchanged.\nEach block contains the validated code section and the …\nCalls <code>U::from(self)</code>.\nThe start function which is automatically executed during …\nValidate the global section.\nRead and validate constant expressions.\nSpecial variant to encode an uninstantiated type for <code>select</code>…\nSpecial variant to encode that any possible number of …\nA value\nAssert the top-most <code>ValidationStackEntry</code> is a specific …\nAsserts that the valtypes on the stack match the expected …\nAsserts that the values on top of the stack match those of …\nSimilar to <code>ValidationStack::pop_valtype</code>, because it pops a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a new ValidationStack\nDANGER! only to be used within const validation! use …\nPop a <code>ValidationStackEntry</code> from the <code>ValidationStack</code>\nRepresents the address of an external reference in the …\nRepresents the address of a function within a WebAssembly …\nAn InteropValue is a Rust types that can be converted into …\nAn InteropValueList is an iterable list of InteropValues …\nA value at runtime. This is essentially a duplicate of …")