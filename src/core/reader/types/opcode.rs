//! All opcodes, in alphanumerical order by their numeric (hex-)value
pub const UNREACHABLE: u8 = 0x00;
pub const NOP: u8 = 0x01;
pub const BLOCK: u8 = 0x02;
pub const LOOP: u8 = 0x03;
pub const IF: u8 = 0x04;
pub const ELSE: u8 = 0x05;
pub const END: u8 = 0x0B;
pub const BR: u8 = 0x0C;
pub const BR_IF: u8 = 0x0D;
pub const BR_TABLE: u8 = 0x0E;
pub const RETURN: u8 = 0x0F;
pub const CALL: u8 = 0x10;
pub const DROP: u8 = 0x1A;
pub const SELECT: u8 = 0x1B;
pub const SELECT_T: u8 = 0x1C;
pub const CALL_INDIRECT: u8 = 0x11;
pub const LOCAL_GET: u8 = 0x20;
pub const LOCAL_SET: u8 = 0x21;
pub const LOCAL_TEE: u8 = 0x22;
pub const GLOBAL_GET: u8 = 0x23;
pub const GLOBAL_SET: u8 = 0x24;
pub const TABLE_GET: u8 = 0x25;
pub const TABLE_SET: u8 = 0x26;
pub const I32_LOAD: u8 = 0x28;
pub const I64_LOAD: u8 = 0x29;
pub const F32_LOAD: u8 = 0x2A;
pub const F64_LOAD: u8 = 0x2B;
pub const I32_LOAD8_S: u8 = 0x2C;
pub const I32_LOAD8_U: u8 = 0x2D;
pub const I32_LOAD16_S: u8 = 0x2E;
pub const I32_LOAD16_U: u8 = 0x2F;
pub const I64_LOAD8_S: u8 = 0x30;
pub const I64_LOAD8_U: u8 = 0x31;
pub const I64_LOAD16_S: u8 = 0x32;
pub const I64_LOAD16_U: u8 = 0x33;
pub const I64_LOAD32_S: u8 = 0x34;
pub const I64_LOAD32_U: u8 = 0x35;
pub const I32_STORE: u8 = 0x36;
pub const I64_STORE: u8 = 0x37;
pub const F32_STORE: u8 = 0x38;
pub const F64_STORE: u8 = 0x39;
pub const I32_STORE8: u8 = 0x3A;
pub const I32_STORE16: u8 = 0x3B;
pub const I64_STORE8: u8 = 0x3C;
pub const I64_STORE16: u8 = 0x3D;
pub const I64_STORE32: u8 = 0x3E;
pub const MEMORY_SIZE: u8 = 0x3F;
pub const MEMORY_GROW: u8 = 0x40;
pub const I32_CONST: u8 = 0x41;
pub const I64_CONST: u8 = 0x42;
pub const F32_CONST: u8 = 0x43;
pub const F64_CONST: u8 = 0x44;
pub const I32_EQZ: u8 = 0x45;
pub const I32_EQ: u8 = 0x46;
pub const I32_NE: u8 = 0x47;
pub const I32_LT_S: u8 = 0x48;
pub const I32_LT_U: u8 = 0x49;
pub const I32_GT_S: u8 = 0x4A;
pub const I32_GT_U: u8 = 0x4B;
pub const I32_LE_S: u8 = 0x4C;
pub const I32_LE_U: u8 = 0x4D;
pub const I32_GE_S: u8 = 0x4E;
pub const I32_GE_U: u8 = 0x4F;
pub const I64_EQZ: u8 = 0x50;
pub const I64_EQ: u8 = 0x51;
pub const I64_NE: u8 = 0x52;
pub const I64_LT_S: u8 = 0x53;
pub const I64_LT_U: u8 = 0x54;
pub const I64_GT_S: u8 = 0x55;
pub const I64_GT_U: u8 = 0x56;
pub const I64_LE_S: u8 = 0x57;
pub const I64_LE_U: u8 = 0x58;
pub const I64_GE_S: u8 = 0x59;
pub const I64_GE_U: u8 = 0x5A;
pub const F32_EQ: u8 = 0x5B;
pub const F32_NE: u8 = 0x5C;
pub const F32_LT: u8 = 0x5D;
pub const F32_GT: u8 = 0x5E;
pub const F32_LE: u8 = 0x5F;
pub const F32_GE: u8 = 0x60;
pub const F64_EQ: u8 = 0x61;
pub const F64_NE: u8 = 0x62;
pub const F64_LT: u8 = 0x63;
pub const F64_GT: u8 = 0x64;
pub const F64_LE: u8 = 0x65;
pub const F64_GE: u8 = 0x66;
pub const I32_ADD: u8 = 0x6A;
pub const I32_SUB: u8 = 0x6B;
pub const I32_MUL: u8 = 0x6C;
pub const I32_DIV_S: u8 = 0x6D;
pub const I32_DIV_U: u8 = 0x6E;
pub const I32_REM_S: u8 = 0x6F;
pub const I32_CLZ: u8 = 0x67;
pub const I32_CTZ: u8 = 0x68;
pub const I32_POPCNT: u8 = 0x69;
pub const I32_REM_U: u8 = 0x70;
pub const I32_AND: u8 = 0x71;
pub const I32_OR: u8 = 0x72;
pub const I32_XOR: u8 = 0x73;
pub const I32_SHL: u8 = 0x74;
pub const I32_SHR_S: u8 = 0x75;
pub const I32_SHR_U: u8 = 0x76;
pub const I32_ROTL: u8 = 0x77;
pub const I32_ROTR: u8 = 0x78;
pub const I64_CLZ: u8 = 0x79;
pub const I64_CTZ: u8 = 0x7A;
pub const I64_POPCNT: u8 = 0x7B;
pub const I64_ADD: u8 = 0x7C;
pub const I64_SUB: u8 = 0x7D;
pub const I64_MUL: u8 = 0x7E;
pub const I64_DIV_S: u8 = 0x7F;
pub const I64_DIV_U: u8 = 0x80;
pub const I64_REM_S: u8 = 0x81;
pub const I64_REM_U: u8 = 0x82;
pub const I64_AND: u8 = 0x83;
pub const I64_OR: u8 = 0x84;
pub const I64_XOR: u8 = 0x85;
pub const I64_SHL: u8 = 0x86;
pub const I64_SHR_S: u8 = 0x87;
pub const I64_SHR_U: u8 = 0x88;
pub const I64_ROTL: u8 = 0x89;
pub const I64_ROTR: u8 = 0x8A;
pub const F32_ABS: u8 = 0x8B;
pub const F32_NEG: u8 = 0x8C;
pub const F32_CEIL: u8 = 0x8D;
pub const F32_FLOOR: u8 = 0x8E;
pub const F32_TRUNC: u8 = 0x8F;
pub const F32_NEAREST: u8 = 0x90;
pub const F32_SQRT: u8 = 0x91;
pub const F32_ADD: u8 = 0x92;
pub const F32_SUB: u8 = 0x93;
pub const F32_MUL: u8 = 0x94;
pub const F32_DIV: u8 = 0x95;
pub const F32_MIN: u8 = 0x96;
pub const F32_MAX: u8 = 0x97;
pub const F32_COPYSIGN: u8 = 0x98;
pub const F64_ABS: u8 = 0x99;
pub const F64_NEG: u8 = 0x9A;
pub const F64_CEIL: u8 = 0x9B;
pub const F64_FLOOR: u8 = 0x9C;
pub const F64_TRUNC: u8 = 0x9D;
pub const F64_NEAREST: u8 = 0x9E;
pub const F64_SQRT: u8 = 0x9F;
pub const F64_ADD: u8 = 0xA0;
pub const F64_SUB: u8 = 0xA1;
pub const F64_MUL: u8 = 0xA2;
pub const F64_DIV: u8 = 0xA3;
pub const F64_MIN: u8 = 0xA4;
pub const F64_MAX: u8 = 0xA5;
pub const F64_COPYSIGN: u8 = 0xA6;
pub const I32_WRAP_I64: u8 = 0xA7;
pub const I32_TRUNC_F32_S: u8 = 0xA8;
pub const I32_TRUNC_F32_U: u8 = 0xA9;
pub const I32_TRUNC_F64_S: u8 = 0xAA;
pub const I32_TRUNC_F64_U: u8 = 0xAB;
pub const I64_EXTEND_I32_S: u8 = 0xAC;
pub const I64_EXTEND_I32_U: u8 = 0xAD;
pub const I64_TRUNC_F32_S: u8 = 0xAE;
pub const I64_TRUNC_F32_U: u8 = 0xAF;
pub const I64_TRUNC_F64_S: u8 = 0xB0;
pub const I64_TRUNC_F64_U: u8 = 0xB1;
pub const F32_CONVERT_I32_S: u8 = 0xB2;
pub const F32_CONVERT_I32_U: u8 = 0xB3;
pub const F32_CONVERT_I64_S: u8 = 0xB4;
pub const F32_CONVERT_I64_U: u8 = 0xB5;
pub const F32_DEMOTE_F64: u8 = 0xB6;
pub const F64_CONVERT_I32_S: u8 = 0xB7;
pub const F64_CONVERT_I32_U: u8 = 0xB8;
pub const F64_CONVERT_I64_S: u8 = 0xB9;
pub const F64_CONVERT_I64_U: u8 = 0xBA;
pub const F64_PROMOTE_F32: u8 = 0xBB;
pub const I32_REINTERPRET_F32: u8 = 0xBC;
pub const I64_REINTERPRET_F64: u8 = 0xBD;
pub const F32_REINTERPRET_I32: u8 = 0xBE;
pub const F64_REINTERPRET_I64: u8 = 0xBF;
pub const REF_NULL: u8 = 0xD0;
pub const REF_IS_NULL: u8 = 0xD1;
pub const REF_FUNC: u8 = 0xD2;
pub const FC_EXTENSIONS: u8 = 0xFC;
pub const FD_EXTENSIONS: u8 = 0xFD;
pub const I32_EXTEND8_S: u8 = 0xC0;
pub const I32_EXTEND16_S: u8 = 0xC1;
pub const I64_EXTEND8_S: u8 = 0xC2;
pub const I64_EXTEND16_S: u8 = 0xC3;
pub const I64_EXTEND32_S: u8 = 0xC4;

pub mod fc_extensions {
    pub const I32_TRUNC_SAT_F32_S: u32 = 0x00;
    pub const I32_TRUNC_SAT_F32_U: u32 = 0x01;
    pub const I32_TRUNC_SAT_F64_S: u32 = 0x02;
    pub const I32_TRUNC_SAT_F64_U: u32 = 0x03;
    pub const I64_TRUNC_SAT_F32_S: u32 = 0x04;
    pub const I64_TRUNC_SAT_F32_U: u32 = 0x05;
    pub const I64_TRUNC_SAT_F64_S: u32 = 0x06;
    pub const I64_TRUNC_SAT_F64_U: u32 = 0x07;
    pub const MEMORY_INIT: u32 = 0x08;
    pub const DATA_DROP: u32 = 0x09;
    pub const MEMORY_COPY: u32 = 0x0A;
    pub const MEMORY_FILL: u32 = 0x0B;
    pub const TABLE_INIT: u32 = 0x0C;
    pub const ELEM_DROP: u32 = 0x0D;
    pub const TABLE_COPY: u32 = 0x0E;
    pub const TABLE_GROW: u32 = 0x0F;
    pub const TABLE_SIZE: u32 = 0x10;
    pub const TABLE_FILL: u32 = 0x11;
}

#[cfg(debug_assertions)]
pub fn fc_extension_opcode_to_str(instr: u32) -> alloc::borrow::Cow<'static, str> {
    match instr {
        0x00 => "I32_TRUNC_SAT_F32_S",
        0x01 => "I32_TRUNC_SAT_F32_U",
        0x02 => "I32_TRUNC_SAT_F64_S",
        0x03 => "I32_TRUNC_SAT_F64_U",
        0x04 => "I64_TRUNC_SAT_F32_S",
        0x05 => "I64_TRUNC_SAT_F32_U",
        0x06 => "I64_TRUNC_SAT_F64_S",
        0x07 => "I64_TRUNC_SAT_F64_U",
        0x08 => "MEMORY_INIT",
        0x09 => "DATA_DROP",
        0x0A => "MEMORY_COPY",
        0x0B => "MEMORY_FILL",
        0x0C => "TABLE_INIT",
        0x0D => "ELEM_DROP",
        0x0E => "TABLE_COPY",
        0x0F => "TABLE_GROW",
        0x10 => "TABLE_SIZE",
        0x11 => "TABLE_FILL",
        instr => return alloc::format!("UNKNOWN({instr:x})").into(),
    }
    .into()
}

pub mod fd_extensions {
    pub const V128_LOAD: u32 = 0;
    pub const V128_LOAD8X8_S: u32 = 1;
    pub const V128_LOAD8X8_U: u32 = 2;
    pub const V128_LOAD16X4_S: u32 = 3;
    pub const V128_LOAD16X4_U: u32 = 4;
    pub const V128_LOAD32X2_S: u32 = 5;
    pub const V128_LOAD32X2_U: u32 = 6;
    pub const V128_LOAD8_SPLAT: u32 = 7;
    pub const V128_LOAD16_SPLAT: u32 = 8;
    pub const V128_LOAD32_SPLAT: u32 = 9;
    pub const V128_LOAD64_SPLAT: u32 = 10;
    pub const V128_STORE: u32 = 11;
    pub const V128_CONST: u32 = 12;
    pub const I8X16_SHUFFLE: u32 = 13;
    pub const I8X16_SWIZZLE: u32 = 14;
    pub const I8X16_SPLAT: u32 = 15;
    pub const I16X8_SPLAT: u32 = 16;
    pub const I32X4_SPLAT: u32 = 17;
    pub const I64X2_SPLAT: u32 = 18;
    pub const F32X4_SPLAT: u32 = 19;
    pub const F64X2_SPLAT: u32 = 20;
    pub const I8X16_EXTRACT_LANE_S: u32 = 21;
    pub const I8X16_EXTRACT_LANE_U: u32 = 22;
    pub const I8X16_REPLACE_LANE: u32 = 23;
    pub const I16X8_EXTRACT_LANE_S: u32 = 24;
    pub const I16X8_EXTRACT_LANE_U: u32 = 25;
    pub const I16X8_REPLACE_LANE: u32 = 26;
    pub const I32X4_EXTRACT_LANE: u32 = 27;
    pub const I32X4_REPLACE_LANE: u32 = 28;
    pub const I64X2_EXTRACT_LANE: u32 = 29;
    pub const I64X2_REPLACE_LANE: u32 = 30;
    pub const F32X4_EXTRACT_LANE: u32 = 31;
    pub const F32X4_REPLACE_LANE: u32 = 32;
    pub const F64X2_EXTRACT_LANE: u32 = 33;
    pub const F64X2_REPLACE_LANE: u32 = 34;
    pub const I8X16_EQ: u32 = 35;
    pub const I8X16_NE: u32 = 36;
    pub const I8X16_LT_S: u32 = 37;
    pub const I8X16_LT_U: u32 = 38;
    pub const I8X16_GT_S: u32 = 39;
    pub const I8X16_GT_U: u32 = 40;
    pub const I8X16_LE_S: u32 = 41;
    pub const I8X16_LE_U: u32 = 42;
    pub const I8X16_GE_S: u32 = 43;
    pub const I8X16_GE_U: u32 = 44;
    pub const I16X8_EQ: u32 = 45;
    pub const I16X8_NE: u32 = 46;
    pub const I16X8_LT_S: u32 = 47;
    pub const I16X8_LT_U: u32 = 48;
    pub const I16X8_GT_S: u32 = 49;
    pub const I16X8_GT_U: u32 = 50;
    pub const I16X8_LE_S: u32 = 51;
    pub const I16X8_LE_U: u32 = 52;
    pub const I16X8_GE_S: u32 = 53;
    pub const I16X8_GE_U: u32 = 54;
    pub const I32X4_EQ: u32 = 55;
    pub const I32X4_NE: u32 = 56;
    pub const I32X4_LT_S: u32 = 57;
    pub const I32X4_LT_U: u32 = 58;
    pub const I32X4_GT_S: u32 = 59;
    pub const I32X4_GT_U: u32 = 60;
    pub const I32X4_LE_S: u32 = 61;
    pub const I32X4_LE_U: u32 = 62;
    pub const I32X4_GE_S: u32 = 63;
    pub const I32X4_GE_U: u32 = 64;
    pub const F32X4_EQ: u32 = 65;
    pub const F32X4_NE: u32 = 66;
    pub const F32X4_LT: u32 = 67;
    pub const F32X4_GT: u32 = 68;
    pub const F32X4_LE: u32 = 69;
    pub const F32X4_GE: u32 = 70;
    pub const F64X2_EQ: u32 = 71;
    pub const F64X2_NE: u32 = 72;
    pub const F64X2_LT: u32 = 73;
    pub const F64X2_GT: u32 = 74;
    pub const F64X2_LE: u32 = 75;
    pub const F64X2_GE: u32 = 76;
    pub const V128_NOT: u32 = 77;
    pub const V128_AND: u32 = 78;
    pub const V128_ANDNOT: u32 = 79;
    pub const V128_OR: u32 = 80;
    pub const V128_XOR: u32 = 81;
    pub const V128_BITSELECT: u32 = 82;
    pub const V128_ANY_TRUE: u32 = 83;
    pub const V128_LOAD8_LANE: u32 = 84;
    pub const V128_LOAD16_LANE: u32 = 85;
    pub const V128_LOAD32_LANE: u32 = 86;
    pub const V128_LOAD64_LANE: u32 = 87;
    pub const V128_STORE8_LANE: u32 = 88;
    pub const V128_STORE16_LANE: u32 = 89;
    pub const V128_STORE32_LANE: u32 = 90;
    pub const V128_STORE64_LANE: u32 = 91;
    pub const V128_LOAD32_ZERO: u32 = 92;
    pub const V128_LOAD64_ZERO: u32 = 93;
    pub const F32X4_DEMOTE_F64X2_ZERO: u32 = 94;
    pub const F64X2_PROMOTE_LOW_F32X4: u32 = 95;
    pub const I8X16_ABS: u32 = 96;
    pub const I8X16_NEG: u32 = 97;
    pub const I8X16_POPCNT: u32 = 98;
    pub const I8X16_ALL_TRUE: u32 = 99;
    pub const I8X16_BITMASK: u32 = 100;
    pub const I8X16_NARROW_I16X8_S: u32 = 101;
    pub const I8X16_NARROW_I16X8_U: u32 = 102;
    pub const F32X4_CEIL: u32 = 103;
    pub const F32X4_FLOOR: u32 = 104;
    pub const F32X4_TRUNC: u32 = 105;
    pub const F32X4_NEAREST: u32 = 106;
    pub const I8X16_SHL: u32 = 107;
    pub const I8X16_SHR_S: u32 = 108;
    pub const I8X16_SHR_U: u32 = 109;
    pub const I8X16_ADD: u32 = 110;
    pub const I8X16_ADD_SAT_S: u32 = 111;
    pub const I8X16_ADD_SAT_U: u32 = 112;
    pub const I8X16_SUB: u32 = 113;
    pub const I8X16_SUB_SAT_S: u32 = 114;
    pub const I8X16_SUB_SAT_U: u32 = 115;
    pub const F64X2_CEIL: u32 = 116;
    pub const F64X2_FLOOR: u32 = 117;
    pub const I8X16_MIN_S: u32 = 118;
    pub const I8X16_MIN_U: u32 = 119;
    pub const I8X16_MAX_S: u32 = 120;
    pub const I8X16_MAX_U: u32 = 121;
    pub const F64X2_TRUNC: u32 = 122;
    pub const I8X16_AVGR_U: u32 = 123;
    pub const I16X8_EXTADD_PAIRWISE_I8X16_S: u32 = 124;
    pub const I16X8_EXTADD_PAIRWISE_I8X16_U: u32 = 125;
    pub const I32X4_EXTADD_PAIRWISE_I16X8_S: u32 = 126;
    pub const I32X4_EXTADD_PAIRWISE_I16X8_U: u32 = 127;
    pub const I16X8_ABS: u32 = 128;
    pub const I16X8_NEG: u32 = 129;
    pub const I16X8_Q15MULRSAT_S: u32 = 130;
    pub const I16X8_ALL_TRUE: u32 = 131;
    pub const I16X8_BITMASK: u32 = 132;
    pub const I16X8_NARROW_I32X4_S: u32 = 133;
    pub const I16X8_NARROW_I32X4_U: u32 = 134;
    pub const I16X8_EXTEND_LOW_I8X16_S: u32 = 135;
    pub const I16X8_EXTEND_HIGH_I8X16_S: u32 = 136;
    pub const I16X8_EXTEND_LOW_I8X16_U: u32 = 137;
    pub const I16X8_EXTEND_HIGH_I8X16_U: u32 = 138;
    pub const I16X8_SHL: u32 = 139;
    pub const I16X8_SHR_S: u32 = 140;
    pub const I16X8_SHR_U: u32 = 141;
    pub const I16X8_ADD: u32 = 142;
    pub const I16X8_ADD_SAT_S: u32 = 143;
    pub const I16X8_ADD_SAT_U: u32 = 144;
    pub const I16X8_SUB: u32 = 145;
    pub const I16X8_SUB_SAT_S: u32 = 146;
    pub const I16X8_SUB_SAT_U: u32 = 147;
    pub const F64X2_NEAREST: u32 = 148;
    pub const I16X8_MUL: u32 = 149;
    pub const I16X8_MIN_S: u32 = 150;
    pub const I16X8_MIN_U: u32 = 151;
    pub const I16X8_MAX_S: u32 = 152;
    pub const I16X8_MAX_U: u32 = 153;
    // pub const ???: u32 = 154;
    pub const I16X8_AVGR_U: u32 = 155;
    pub const I16X8_EXTMUL_LOW_I8X16_S: u32 = 156;
    pub const I16X8_EXTMUL_HIGH_I8X16_S: u32 = 157;
    pub const I16X8_EXTMUL_LOW_I8X16_U: u32 = 158;
    pub const I16X8_EXTMUL_HIGH_I8X16_U: u32 = 159;
    pub const I32X4_ABS: u32 = 160;
    pub const I32X4_NEG: u32 = 161;
    /// Relaxed SIMD Proposal
    pub const I8X16_RELAXED_SWIZZLE: u32 = 162;
    pub const I32X4_ALL_TRUE: u32 = 163;
    pub const I32X4_BITMASK: u32 = 164;
    /// Relaxed SIMD Proposal
    pub const I32X4_RELAXED_TRUNC_F32X4_S: u32 = 165;
    /// Relaxed SIMD Proposal
    pub const I32X4_RELAXED_TRUNC_F32X4_U: u32 = 166;
    pub const I32X4_EXTEND_LOW_I16X8_S: u32 = 167;
    pub const I32X4_EXTEND_HIGH_I16X8_S: u32 = 168;
    pub const I32X4_EXTEND_LOW_I16X8_U: u32 = 169;
    pub const I32X4_EXTEND_HIGH_I16X8_U: u32 = 170;
    pub const I32X4_SHL: u32 = 171;
    pub const I32X4_SHR_S: u32 = 172;
    pub const I32X4_SHR_U: u32 = 173;
    pub const I32X4_ADD: u32 = 174;
    /// Relaxed SIMD Proposal
    pub const F32X4_RELAXED_MADD: u32 = 175;
    /// Relaxed SIMD Proposal
    pub const F32X4_RELAXED_NMADD: u32 = 176;
    pub const I32X4_SUB: u32 = 177;
    /// Relaxed SIMD Proposal
    pub const I8X16_RELAXED_LANESELECT: u32 = 178;
    /// Relaxed SIMD Proposal
    pub const I16X8_RELAXED_LANESELECT: u32 = 179;
    /// Relaxed SIMD Proposal
    pub const F32X4_RELAXED_MIN: u32 = 180;
    pub const I32X4_MUL: u32 = 181;
    pub const I32X4_MIN_S: u32 = 182;
    pub const I32X4_MIN_U: u32 = 183;
    pub const I32X4_MAX_S: u32 = 184;
    pub const I32X4_MAX_U: u32 = 185;
    pub const I32X4_DOT_I16X8_S: u32 = 186;
    // pub const ???: u32 = 187;
    pub const I32X4_EXTMUL_LOW_I16X8_S: u32 = 188;
    pub const I32X4_EXTMUL_HIGH_I16X8_S: u32 = 189;
    pub const I32X4_EXTMUL_LOW_I16X8_U: u32 = 190;
    pub const I32X4_EXTMUL_HIGH_I16X8_U: u32 = 191;
    pub const I64X2_ABS: u32 = 192;
    pub const I64X2_NEG: u32 = 193;
    // pub const ???: u32 = 194;
    pub const I64X2_ALL_TRUE: u32 = 195;
    pub const I64X2_BITMASK: u32 = 196;
    /// Relaxed SIMD Proposal
    pub const I32X4_RELAXED_TRUNC_F64X2_S_ZERO: u32 = 197;
    /// Relaxed SIMD Proposal
    pub const I32X4_RELAXED_TRUNC_F64X2_U_ZERO: u32 = 198;
    pub const I64X2_EXTEND_LOW_I32X4_S: u32 = 199;
    pub const I64X2_EXTEND_HIGH_I32X4_S: u32 = 200;
    pub const I64X2_EXTEND_LOW_I32X4_U: u32 = 201;
    pub const I64X2_EXTEND_HIGH_I32X4_U: u32 = 202;
    pub const I64X2_SHL: u32 = 203;
    pub const I64X2_SHR_S: u32 = 204;
    pub const I64X2_SHR_U: u32 = 205;
    pub const I64X2_ADD: u32 = 206;
    /// Relaxed SIMD Proposal
    pub const F64X2_RELAXED_MADD: u32 = 207;
    /// Relaxed SIMD Proposal
    pub const F64X2_RELAXED_NMADD: u32 = 208;
    pub const I64X2_SUB: u32 = 209;
    /// Relaxed SIMD Proposal
    pub const I32X4_RELAXED_LANESELECT: u32 = 210;
    /// Relaxed SIMD Proposal
    pub const I64X2_RELAXED_LANESELECT: u32 = 211;
    /// Relaxed SIMD Proposal
    pub const F64X2_RELAXED_MIN: u32 = 212;
    pub const I64X2_MUL: u32 = 213;
    pub const I64X2_EQ: u32 = 214;
    pub const I64X2_NE: u32 = 215;
    pub const I64X2_LT_S: u32 = 216;
    pub const I64X2_GT_S: u32 = 217;
    pub const I64X2_LE_S: u32 = 218;
    pub const I64X2_GE_S: u32 = 219;
    pub const I64X2_EXTMUL_LOW_I32X4_S: u32 = 220;
    pub const I64X2_EXTMUL_HIGH_I32X4_S: u32 = 221;
    pub const I64X2_EXTMUL_LOW_I32X4_U: u32 = 222;
    pub const I64X2_EXTMUL_HIGH_I32X4_U: u32 = 223;
    pub const F32X4_ABS: u32 = 224;
    pub const F32X4_NEG: u32 = 225;
    /// Relaxed SIMD Proposal
    pub const F32X4_RELAXED_MAX: u32 = 226;
    pub const F32X4_SQRT: u32 = 227;
    pub const F32X4_ADD: u32 = 228;
    pub const F32X4_SUB: u32 = 229;
    pub const F32X4_MUL: u32 = 230;
    pub const F32X4_DIV: u32 = 231;
    pub const F32X4_MIN: u32 = 232;
    pub const F32X4_MAX: u32 = 233;
    pub const F32X4_PMIN: u32 = 234;
    pub const F32X4_PMAX: u32 = 235;
    pub const F64X2_ABS: u32 = 236;
    pub const F64X2_NEG: u32 = 237;
    // Relaxed SIMD Proposal
    pub const F64X2_RELAXED_MAX: u32 = 238;
    pub const F64X2_SQRT: u32 = 239;
    pub const F64X2_ADD: u32 = 240;
    pub const F64X2_SUB: u32 = 241;
    pub const F64X2_MUL: u32 = 242;
    pub const F64X2_DIV: u32 = 243;
    pub const F64X2_MIN: u32 = 244;
    pub const F64X2_MAX: u32 = 245;
    pub const F64X2_PMIN: u32 = 246;
    pub const F64X2_PMAX: u32 = 247;
    pub const I32X4_TRUNC_SAT_F32X4_S: u32 = 248;
    pub const I32X4_TRUNC_SAT_F32X4_U: u32 = 249;
    pub const F32X4_CONVERT_I32X4_S: u32 = 250;
    pub const F32X4_CONVERT_I32X4_U: u32 = 251;
    pub const I32X4_TRUNC_SAT_F64X2_S_ZERO: u32 = 252;
    pub const I32X4_TRUNC_SAT_F64X2_U_ZERO: u32 = 253;
    pub const F64X2_CONVERT_LOW_I32X4_S: u32 = 254;
    pub const F64X2_CONVERT_LOW_I32X4_U: u32 = 255;
}

#[cfg(debug_assertions)]
pub fn fd_extension_opcode_to_str(instr: u32) -> alloc::borrow::Cow<'static, str> {
    use fd_extensions::*;

    match instr {
        V128_LOAD => "V128_LOAD",
        V128_LOAD8X8_S => "V128_LOAD8X8_S",
        V128_LOAD8X8_U => "V128_LOAD8X8_U",
        V128_LOAD16X4_S => "V128_LOAD16X4_S",
        V128_LOAD16X4_U => "V128_LOAD16X4_U",
        V128_LOAD32X2_S => "V128_LOAD32X2_S",
        V128_LOAD32X2_U => "V128_LOAD32X2_U",
        V128_LOAD8_SPLAT => "V128_LOAD8_SPLAT",
        V128_LOAD16_SPLAT => "V128_LOAD16_SPLAT",
        V128_LOAD32_SPLAT => "V128_LOAD32_SPLAT",
        V128_LOAD64_SPLAT => "V128_LOAD64_SPLAT",
        V128_STORE => "V128_STORE",
        V128_CONST => "V128_CONST",
        I8X16_SHUFFLE => "I8X16_SHUFFLE",
        I8X16_SWIZZLE => "I8X16_SWIZZLE",
        I8X16_SPLAT => "I8X16_SPLAT",
        I16X8_SPLAT => "I16X8_SPLAT",
        I32X4_SPLAT => "I32X4_SPLAT",
        I64X2_SPLAT => "I64X2_SPLAT",
        F32X4_SPLAT => "F32X4_SPLAT",
        F64X2_SPLAT => "F64X2_SPLAT",
        I8X16_EXTRACT_LANE_S => "I8X16_EXTRACT_LANE_S",
        I8X16_EXTRACT_LANE_U => "I8X16_EXTRACT_LANE_U",
        I8X16_REPLACE_LANE => "I8X16_REPLACE_LANE",
        I16X8_EXTRACT_LANE_S => "I16X8_EXTRACT_LANE_S",
        I16X8_EXTRACT_LANE_U => "I16X8_EXTRACT_LANE_U",
        I16X8_REPLACE_LANE => "I16X8_REPLACE_LANE",
        I32X4_EXTRACT_LANE => "I32X4_EXTRACT_LANE",
        I32X4_REPLACE_LANE => "I32X4_REPLACE_LANE",
        I64X2_EXTRACT_LANE => "I64X2_EXTRACT_LANE",
        I64X2_REPLACE_LANE => "I64X2_REPLACE_LANE",
        F32X4_EXTRACT_LANE => "F32X4_EXTRACT_LANE",
        F32X4_REPLACE_LANE => "F32X4_REPLACE_LANE",
        F64X2_EXTRACT_LANE => "F64X2_EXTRACT_LANE",
        F64X2_REPLACE_LANE => "F64X2_REPLACE_LANE",
        I8X16_EQ => "I8X16_EQ",
        I8X16_NE => "I8X16_NE",
        I8X16_LT_S => "I8X16_LT_S",
        I8X16_LT_U => "I8X16_LT_U",
        I8X16_GT_S => "I8X16_GT_S",
        I8X16_GT_U => "I8X16_GT_U",
        I8X16_LE_S => "I8X16_LE_S",
        I8X16_LE_U => "I8X16_LE_U",
        I8X16_GE_S => "I8X16_GE_S",
        I8X16_GE_U => "I8X16_GE_U",
        I16X8_EQ => "I16X8_EQ",
        I16X8_NE => "I16X8_NE",
        I16X8_LT_S => "I16X8_LT_S",
        I16X8_LT_U => "I16X8_LT_U",
        I16X8_GT_S => "I16X8_GT_S",
        I16X8_GT_U => "I16X8_GT_U",
        I16X8_LE_S => "I16X8_LE_S",
        I16X8_LE_U => "I16X8_LE_U",
        I16X8_GE_S => "I16X8_GE_S",
        I16X8_GE_U => "I16X8_GE_U",
        I32X4_EQ => "I32X4_EQ",
        I32X4_NE => "I32X4_NE",
        I32X4_LT_S => "I32X4_LT_S",
        I32X4_LT_U => "I32X4_LT_U",
        I32X4_GT_S => "I32X4_GT_S",
        I32X4_GT_U => "I32X4_GT_U",
        I32X4_LE_S => "I32X4_LE_S",
        I32X4_LE_U => "I32X4_LE_U",
        I32X4_GE_S => "I32X4_GE_S",
        I32X4_GE_U => "I32X4_GE_U",
        F32X4_EQ => "F32X4_EQ",
        F32X4_NE => "F32X4_NE",
        F32X4_LT => "F32X4_LT",
        F32X4_GT => "F32X4_GT",
        F32X4_LE => "F32X4_LE",
        F32X4_GE => "F32X4_GE",
        F64X2_EQ => "F64X2_EQ",
        F64X2_NE => "F64X2_NE",
        F64X2_LT => "F64X2_LT",
        F64X2_GT => "F64X2_GT",
        F64X2_LE => "F64X2_LE",
        F64X2_GE => "F64X2_GE",
        V128_NOT => "V128_NOT",
        V128_AND => "V128_AND",
        V128_ANDNOT => "V128_ANDNOT",
        V128_OR => "V128_OR",
        V128_XOR => "V128_XOR",
        V128_BITSELECT => "V128_BITSELECT",
        V128_ANY_TRUE => "V128_ANY_TRUE",
        V128_LOAD8_LANE => "V128_LOAD8_LANE",
        V128_LOAD16_LANE => "V128_LOAD16_LANE",
        V128_LOAD32_LANE => "V128_LOAD32_LANE",
        V128_LOAD64_LANE => "V128_LOAD64_LANE",
        V128_STORE8_LANE => "V128_STORE8_LANE",
        V128_STORE16_LANE => "V128_STORE16_LANE",
        V128_STORE32_LANE => "V128_STORE32_LANE",
        V128_STORE64_LANE => "V128_STORE64_LANE",
        V128_LOAD32_ZERO => "V128_LOAD32_ZERO",
        V128_LOAD64_ZERO => "V128_LOAD64_ZERO",
        F32X4_DEMOTE_F64X2_ZERO => "F32X4_DEMOTE_F64X2_ZERO",
        F64X2_PROMOTE_LOW_F32X4 => "F64X2_PROMOTE_LOW_F32X4",
        I8X16_ABS => "I8X16_ABS",
        I8X16_NEG => "I8X16_NEG",
        I8X16_POPCNT => "I8X16_POPCNT",
        I8X16_ALL_TRUE => "I8X16_ALL_TRUE",
        I8X16_BITMASK => "I8X16_BITMASK",
        I8X16_NARROW_I16X8_S => "I8X16_NARROW_I16X8_S",
        I8X16_NARROW_I16X8_U => "I8X16_NARROW_I16X8_U",
        F32X4_CEIL => "F32X4_CEIL",
        F32X4_FLOOR => "F32X4_FLOOR",
        F32X4_TRUNC => "F32X4_TRUNC",
        F32X4_NEAREST => "F32X4_NEAREST",
        I8X16_SHL => "I8X16_SHL",
        I8X16_SHR_S => "I8X16_SHR_S",
        I8X16_SHR_U => "I8X16_SHR_U",
        I8X16_ADD => "I8X16_ADD",
        I8X16_ADD_SAT_S => "I8X16_ADD_SAT_S",
        I8X16_ADD_SAT_U => "I8X16_ADD_SAT_U",
        I8X16_SUB => "I8X16_SUB",
        I8X16_SUB_SAT_S => "I8X16_SUB_SAT_S",
        I8X16_SUB_SAT_U => "I8X16_SUB_SAT_U",
        F64X2_CEIL => "F64X2_CEIL",
        F64X2_FLOOR => "F64X2_FLOOR",
        I8X16_MIN_S => "I8X16_MIN_S",
        I8X16_MIN_U => "I8X16_MIN_U",
        I8X16_MAX_S => "I8X16_MAX_S",
        I8X16_MAX_U => "I8X16_MAX_U",
        F64X2_TRUNC => "F64X2_TRUNC",
        I8X16_AVGR_U => "I8X16_AVGR_U",
        I16X8_EXTADD_PAIRWISE_I8X16_S => "I16X8_EXTADD_PAIRWISE_I8X16_S",
        I16X8_EXTADD_PAIRWISE_I8X16_U => "I16X8_EXTADD_PAIRWISE_I8X16_U",
        I32X4_EXTADD_PAIRWISE_I16X8_S => "I32X4_EXTADD_PAIRWISE_I16X8_S",
        I32X4_EXTADD_PAIRWISE_I16X8_U => "I32X4_EXTADD_PAIRWISE_I16X8_U",
        I16X8_ABS => "I16X8_ABS",
        I16X8_NEG => "I16X8_NEG",
        I16X8_Q15MULRSAT_S => "I16X8_Q15MULRSAT_S",
        I16X8_ALL_TRUE => "I16X8_ALL_TRUE",
        I16X8_BITMASK => "I16X8_BITMASK",
        I16X8_NARROW_I32X4_S => "I16X8_NARROW_I32X4_S",
        I16X8_NARROW_I32X4_U => "I16X8_NARROW_I32X4_U",
        I16X8_EXTEND_LOW_I8X16_S => "I16X8_EXTEND_LOW_I8X16_S",
        I16X8_EXTEND_HIGH_I8X16_S => "I16X8_EXTEND_HIGH_I8X16_S",
        I16X8_EXTEND_LOW_I8X16_U => "I16X8_EXTEND_LOW_I8X16_U",
        I16X8_EXTEND_HIGH_I8X16_U => "I16X8_EXTEND_HIGH_I8X16_U",
        I16X8_SHL => "I16X8_SHL",
        I16X8_SHR_S => "I16X8_SHR_S",
        I16X8_SHR_U => "I16X8_SHR_U",
        I16X8_ADD => "I16X8_ADD",
        I16X8_ADD_SAT_S => "I16X8_ADD_SAT_S",
        I16X8_ADD_SAT_U => "I16X8_ADD_SAT_U",
        I16X8_SUB => "I16X8_SUB",
        I16X8_SUB_SAT_S => "I16X8_SUB_SAT_S",
        I16X8_SUB_SAT_U => "I16X8_SUB_SAT_U",
        F64X2_NEAREST => "F64X2_NEAREST",
        I16X8_MUL => "I16X8_MUL",
        I16X8_MIN_S => "I16X8_MIN_S",
        I16X8_MIN_U => "I16X8_MIN_U",
        I16X8_MAX_S => "I16X8_MAX_S",
        I16X8_MAX_U => "I16X8_MAX_U",
        I16X8_AVGR_U => "I16X8_AVGR_U",
        I16X8_EXTMUL_LOW_I8X16_S => "I16X8_EXTMUL_LOW_I8X16_S",
        I16X8_EXTMUL_HIGH_I8X16_S => "I16X8_EXTMUL_HIGH_I8X16_S",
        I16X8_EXTMUL_LOW_I8X16_U => "I16X8_EXTMUL_LOW_I8X16_U",
        I16X8_EXTMUL_HIGH_I8X16_U => "I16X8_EXTMUL_HIGH_I8X16_U",
        I32X4_ABS => "I32X4_ABS",
        I32X4_NEG => "I32X4_NEG",
        I8X16_RELAXED_SWIZZLE => "I8X16_RELAXED_SWIZZLE",
        I32X4_ALL_TRUE => "I32X4_ALL_TRUE",
        I32X4_BITMASK => "I32X4_BITMASK",
        I32X4_RELAXED_TRUNC_F32X4_S => "I32X4_RELAXED_TRUNC_F32X4_S",
        I32X4_RELAXED_TRUNC_F32X4_U => "I32X4_RELAXED_TRUNC_F32X4_U",
        I32X4_EXTEND_LOW_I16X8_S => "I32X4_EXTEND_LOW_I16X8_S",
        I32X4_EXTEND_HIGH_I16X8_S => "I32X4_EXTEND_HIGH_I16X8_S",
        I32X4_EXTEND_LOW_I16X8_U => "I32X4_EXTEND_LOW_I16X8_U",
        I32X4_EXTEND_HIGH_I16X8_U => "I32X4_EXTEND_HIGH_I16X8_U",
        I32X4_SHL => "I32X4_SHL",
        I32X4_SHR_S => "I32X4_SHR_S",
        I32X4_SHR_U => "I32X4_SHR_U",
        I32X4_ADD => "I32X4_ADD",
        F32X4_RELAXED_MADD => "F32X4_RELAXED_MADD",
        F32X4_RELAXED_NMADD => "F32X4_RELAXED_NMADD",
        I32X4_SUB => "I32X4_SUB",
        I8X16_RELAXED_LANESELECT => "I8X16_RELAXED_LANESELECT",
        I16X8_RELAXED_LANESELECT => "I16X8_RELAXED_LANESELECT",
        F32X4_RELAXED_MIN => "F32X4_RELAXED_MIN",
        I32X4_MUL => "I32X4_MUL",
        I32X4_MIN_S => "I32X4_MIN_S",
        I32X4_MIN_U => "I32X4_MIN_U",
        I32X4_MAX_S => "I32X4_MAX_S",
        I32X4_MAX_U => "I32X4_MAX_U",
        I32X4_DOT_I16X8_S => "I32X4_DOT_I16X8_S",
        I32X4_EXTMUL_LOW_I16X8_S => "I32X4_EXTMUL_LOW_I16X8_S",
        I32X4_EXTMUL_HIGH_I16X8_S => "I32X4_EXTMUL_HIGH_I16X8_S",
        I32X4_EXTMUL_LOW_I16X8_U => "I32X4_EXTMUL_LOW_I16X8_U",
        I32X4_EXTMUL_HIGH_I16X8_U => "I32X4_EXTMUL_HIGH_I16X8_U",
        I64X2_ABS => "I64X2_ABS",
        I64X2_NEG => "I64X2_NEG",
        I64X2_ALL_TRUE => "I64X2_ALL_TRUE",
        I64X2_BITMASK => "I64X2_BITMASK",
        I32X4_RELAXED_TRUNC_F64X2_S_ZERO => "I32X4_RELAXED_TRUNC_F64X2_S_ZERO",
        I32X4_RELAXED_TRUNC_F64X2_U_ZERO => "I32X4_RELAXED_TRUNC_F64X2_U_ZERO",
        I64X2_EXTEND_LOW_I32X4_S => "I64X2_EXTEND_LOW_I32X4_S",
        I64X2_EXTEND_HIGH_I32X4_S => "I64X2_EXTEND_HIGH_I32X4_S",
        I64X2_EXTEND_LOW_I32X4_U => "I64X2_EXTEND_LOW_I32X4_U",
        I64X2_EXTEND_HIGH_I32X4_U => "I64X2_EXTEND_HIGH_I32X4_U",
        I64X2_SHL => "I64X2_SHL",
        I64X2_SHR_S => "I64X2_SHR_S",
        I64X2_SHR_U => "I64X2_SHR_U",
        I64X2_ADD => "I64X2_ADD",
        F64X2_RELAXED_MADD => "F64X2_RELAXED_MADD",
        F64X2_RELAXED_NMADD => "F64X2_RELAXED_NMADD",
        I64X2_SUB => "I64X2_SUB",
        I32X4_RELAXED_LANESELECT => "I32X4_RELAXED_LANESELECT",
        I64X2_RELAXED_LANESELECT => "I64X2_RELAXED_LANESELECT",
        F64X2_RELAXED_MIN => "F64X2_RELAXED_MIN",
        I64X2_MUL => "I64X2_MUL",
        I64X2_EQ => "I64X2_EQ",
        I64X2_NE => "I64X2_NE",
        I64X2_LT_S => "I64X2_LT_S",
        I64X2_GT_S => "I64X2_GT_S",
        I64X2_LE_S => "I64X2_LE_S",
        I64X2_GE_S => "I64X2_GE_S",
        I64X2_EXTMUL_LOW_I32X4_S => "I64X2_EXTMUL_LOW_I32X4_S",
        I64X2_EXTMUL_HIGH_I32X4_S => "I64X2_EXTMUL_HIGH_I32X4_S",
        I64X2_EXTMUL_LOW_I32X4_U => "I64X2_EXTMUL_LOW_I32X4_U",
        I64X2_EXTMUL_HIGH_I32X4_U => "I64X2_EXTMUL_HIGH_I32X4_U",
        F32X4_ABS => "F32X4_ABS",
        F32X4_NEG => "F32X4_NEG",
        F32X4_RELAXED_MAX => "F32X4_RELAXED_MAX",
        F32X4_SQRT => "F32X4_SQRT",
        F32X4_ADD => "F32X4_ADD",
        F32X4_SUB => "F32X4_SUB",
        F32X4_MUL => "F32X4_MUL",
        F32X4_DIV => "F32X4_DIV",
        F32X4_MIN => "F32X4_MIN",
        F32X4_MAX => "F32X4_MAX",
        F32X4_PMIN => "F32X4_PMIN",
        F32X4_PMAX => "F32X4_PMAX",
        F64X2_ABS => "F64X2_ABS",
        F64X2_NEG => "F64X2_NEG",
        F64X2_RELAXED_MAX => "F64X2_RELAXED_MAX",
        F64X2_SQRT => "F64X2_SQRT",
        F64X2_ADD => "F64X2_ADD",
        F64X2_SUB => "F64X2_SUB",
        F64X2_MUL => "F64X2_MUL",
        F64X2_DIV => "F64X2_DIV",
        F64X2_MIN => "F64X2_MIN",
        F64X2_MAX => "F64X2_MAX",
        F64X2_PMIN => "F64X2_PMIN",
        F64X2_PMAX => "F64X2_PMAX",
        I32X4_TRUNC_SAT_F32X4_S => "I32X4_TRUNC_SAT_F32X4_S",
        I32X4_TRUNC_SAT_F32X4_U => "I32X4_TRUNC_SAT_F32X4_U",
        F32X4_CONVERT_I32X4_S => "F32X4_CONVERT_I32X4_S",
        F32X4_CONVERT_I32X4_U => "F32X4_CONVERT_I32X4_U",
        I32X4_TRUNC_SAT_F64X2_S_ZERO => "I32X4_TRUNC_SAT_F64X2_S_ZERO",
        I32X4_TRUNC_SAT_F64X2_U_ZERO => "I32X4_TRUNC_SAT_F64X2_U_ZERO",
        F64X2_CONVERT_LOW_I32X4_S => "F64X2_CONVERT_LOW_I32X4_S",
        F64X2_CONVERT_LOW_I32X4_U => "F64X2_CONVERT_LOW_I32X4_U",
        instr => return alloc::format!("UNKNOWN({instr:x})").into(),
    }
    .into()
}

#[cfg(debug_assertions)]
pub fn opcode_byte_to_str(byte: u8) -> alloc::borrow::Cow<'static, str> {
    match byte {
        UNREACHABLE => "UNREACHABLE",
        NOP => "NOP",
        BLOCK => "BLOCK",
        LOOP => "LOOP",
        IF => "IF",
        ELSE => "ELSE",
        END => "END",
        BR => "BR",
        BR_IF => "BR_IF",
        BR_TABLE => "BR_TABLE",
        RETURN => "RETURN",
        CALL => "CALL",
        CALL_INDIRECT => "CALL_INDIRECT",
        DROP => "DROP",
        SELECT => "SELECT",
        SELECT_T => "SELECT_T",
        LOCAL_GET => "LOCAL_GET",
        LOCAL_SET => "LOCAL_SET",
        LOCAL_TEE => "LOCAL_TEE",
        GLOBAL_GET => "GLOBAL_GET",
        GLOBAL_SET => "GLOBAL_SET",
        TABLE_GET => "TABLE_GET",
        TABLE_SET => "TABLE_SET",
        I32_LOAD => "I32_LOAD",
        I64_LOAD => "I64_LOAD",
        F32_LOAD => "F32_LOAD",
        F64_LOAD => "F64_LOAD",
        I32_LOAD8_S => "I32_LOAD8_S",
        I32_LOAD8_U => "I32_LOAD8_U",
        I32_LOAD16_S => "I32_LOAD16_S",
        I32_LOAD16_U => "I32_LOAD16_U",
        I64_LOAD8_S => "I64_LOAD8_S",
        I64_LOAD8_U => "I64_LOAD8_U",
        I64_LOAD16_S => "I64_LOAD16_S",
        I64_LOAD16_U => "I64_LOAD16_U",
        I64_LOAD32_S => "I64_LOAD32_S",
        I64_LOAD32_U => "I64_LOAD32_U",
        I32_STORE => "I32_STORE",
        I64_STORE => "I64_STORE",
        F32_STORE => "F32_STORE",
        F64_STORE => "F64_STORE",
        I32_STORE8 => "I32_STORE8",
        I32_STORE16 => "I32_STORE16",
        I64_STORE8 => "I64_STORE8",
        I64_STORE16 => "I64_STORE16",
        I64_STORE32 => "I64_STORE32",
        MEMORY_SIZE => "MEMORY_SIZE",
        MEMORY_GROW => "MEMORY_GROW",
        I32_CONST => "I32_CONST",
        I64_CONST => "I64_CONST",
        F32_CONST => "F32_CONST",
        F64_CONST => "F64_CONST",
        I32_EQZ => "I32_EQZ",
        I32_EQ => "I32_EQ",
        I32_NE => "I32_NE",
        I32_LT_S => "I32_LT_S",
        I32_LT_U => "I32_LT_U",
        I32_GT_S => "I32_GT_S",
        I32_GT_U => "I32_GT_U",
        I32_LE_S => "I32_LE_S",
        I32_LE_U => "I32_LE_U",
        I32_GE_S => "I32_GE_S",
        I32_GE_U => "I32_GE_U",
        I64_EQZ => "I64_EQZ",
        I64_EQ => "I64_EQ",
        I64_NE => "I64_NE",
        I64_LT_S => "I64_LT_S",
        I64_LT_U => "I64_LT_U",
        I64_GT_S => "I64_GT_S",
        I64_GT_U => "I64_GT_U",
        I64_LE_S => "I64_LE_S",
        I64_LE_U => "I64_LE_U",
        I64_GE_S => "I64_GE_S",
        I64_GE_U => "I64_GE_U",
        F32_EQ => "F32_EQ",
        F32_NE => "F32_NE",
        F32_LT => "F32_LT",
        F32_GT => "F32_GT",
        F32_LE => "F32_LE",
        F32_GE => "F32_GE",
        F64_EQ => "F64_EQ",
        F64_NE => "F64_NE",
        F64_LT => "F64_LT",
        F64_GT => "F64_GT",
        F64_LE => "F64_LE",
        F64_GE => "F64_GE",
        I32_CLZ => "I32_CLZ",
        I32_CTZ => "I32_CTZ",
        I32_POPCNT => "I32_POPCNT",
        I32_ADD => "I32_ADD",
        I32_SUB => "I32_SUB",
        I32_MUL => "I32_MUL",
        I32_DIV_S => "I32_DIV_S",
        I32_DIV_U => "I32_DIV_U",
        I32_REM_S => "I32_REM_S",
        I32_REM_U => "I32_REM_U",
        I32_AND => "I32_AND",
        I32_OR => "I32_OR",
        I32_XOR => "I32_XOR",
        I32_SHL => "I32_SHL",
        I32_SHR_S => "I32_SHR_S",
        I32_SHR_U => "I32_SHR_U",
        I32_ROTL => "I32_ROTL",
        I32_ROTR => "I32_ROTR",
        I64_CLZ => "I64_CLZ",
        I64_CTZ => "I64_CTZ",
        I64_POPCNT => "I64_POPCNT",
        I64_ADD => "I64_ADD",
        I64_SUB => "I64_SUB",
        I64_MUL => "I64_MUL",
        I64_DIV_S => "I64_DIV_S",
        I64_DIV_U => "I64_DIV_U",
        I64_REM_S => "I64_REM_S",
        I64_REM_U => "I64_REM_U",
        I64_AND => "I64_AND",
        I64_OR => "I64_OR",
        I64_XOR => "I64_XOR",
        I64_SHL => "I64_SHL",
        I64_SHR_S => "I64_SHR_S",
        I64_SHR_U => "I64_SHR_U",
        I64_ROTL => "I64_ROTL",
        I64_ROTR => "I64_ROTR",
        F32_ABS => "F32_ABS",
        F32_NEG => "F32_NEG",
        F32_CEIL => "F32_CEIL",
        F32_FLOOR => "F32_FLOOR",
        F32_TRUNC => "F32_TRUNC",
        F32_NEAREST => "F32_NEAREST",
        F32_SQRT => "F32_SQRT",
        F32_ADD => "F32_ADD",
        F32_SUB => "F32_SUB",
        F32_MUL => "F32_MUL",
        F32_DIV => "F32_DIV",
        F32_MIN => "F32_MIN",
        F32_MAX => "F32_MAX",
        F32_COPYSIGN => "F32_COPYSIGN",
        F64_ABS => "F64_ABS",
        F64_NEG => "F64_NEG",
        F64_CEIL => "F64_CEIL",
        F64_FLOOR => "F64_FLOOR",
        F64_TRUNC => "F64_TRUNC",
        F64_NEAREST => "F64_NEAREST",
        F64_SQRT => "F64_SQRT",
        F64_ADD => "F64_ADD",
        F64_SUB => "F64_SUB",
        F64_MUL => "F64_MUL",
        F64_DIV => "F64_DIV",
        F64_MIN => "F64_MIN",
        F64_MAX => "F64_MAX",
        F64_COPYSIGN => "F64_COPYSIGN",
        I32_WRAP_I64 => "I32_WRAP_I64",
        I32_TRUNC_F32_S => "I32_TRUNC_F32_S",
        I32_TRUNC_F32_U => "I32_TRUNC_F32_U",
        I32_TRUNC_F64_S => "I32_TRUNC_F64_S",
        I32_TRUNC_F64_U => "I32_TRUNC_F64_U",
        I64_EXTEND_I32_S => "I64_EXTEND_I32_S",
        I64_EXTEND_I32_U => "I64_EXTEND_I32_U",
        I64_TRUNC_F32_S => "I64_TRUNC_F32_S",
        I64_TRUNC_F32_U => "I64_TRUNC_F32_U",
        I64_TRUNC_F64_S => "I64_TRUNC_F64_S",
        I64_TRUNC_F64_U => "I64_TRUNC_F64_U",
        F32_CONVERT_I32_S => "F32_CONVERT_I32_S",
        F32_CONVERT_I32_U => "F32_CONVERT_I32_U",
        F32_CONVERT_I64_S => "F32_CONVERT_I64_S",
        F32_CONVERT_I64_U => "F32_CONVERT_I64_U",
        F32_DEMOTE_F64 => "F32_DEMOTE_F64",
        F64_CONVERT_I32_S => "F64_CONVERT_I32_S",
        F64_CONVERT_I32_U => "F64_CONVERT_I32_U",
        F64_CONVERT_I64_S => "F64_CONVERT_I64_S",
        F64_CONVERT_I64_U => "F64_CONVERT_I64_U",
        F64_PROMOTE_F32 => "F64_PROMOTE_F32",
        I32_REINTERPRET_F32 => "I32_REINTERPRET_F32",
        I64_REINTERPRET_F64 => "I64_REINTERPRET_F64",
        F32_REINTERPRET_I32 => "F32_REINTERPRET_I32",
        F64_REINTERPRET_I64 => "F64_REINTERPRET_I64",
        REF_NULL => "REF_NULL",
        REF_IS_NULL => "REF_IS_NULL",
        REF_FUNC => "REF_FUNC",
        FC_EXTENSIONS => "FC_EXTENSIONS",
        I32_EXTEND8_S => "I32_EXTEND8_S",
        I32_EXTEND16_S => "I32_EXTEND16_S",
        I64_EXTEND8_S => "I64_EXTEND8_S",
        I64_EXTEND16_S => "I64_EXTEND16_S",
        I64_EXTEND32_S => "I64_EXTEND32_S",
        instr => return alloc::format!("UNKNOWN({instr:x})").into(),
    }
    .into()
}
